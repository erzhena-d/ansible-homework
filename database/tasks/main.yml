- name: Install mysql-server for Ubuntu
  ansible.builtin.apt:
    name: 
      - mysql-server 
  when: ansible_os_family == "Debian"

- name: Start service, if not started
  ansible.builtin.service:
    name: mysql
    state: started
    enabled: true
  when: ansible_os_family == "Debian"

- name: install PyMySQL
  ansible.builtin.apt:
    name: python3-pymysql
    state: present
    update_cache: yes
  when: ansible_os_family == "Debian"

- name: Create a database
  community.mysql.mysql_db:
    name: "{{ database_name }}"
    state: present
    login_unix_socket: /run/mysqld/mysqld.sock
  when: ansible_os_family == "Debian"

- name: Create a user and grant privileges
  community.mysql.mysql_user:
    name: "{{ database_user }}"
    password: "{{ database_password }}"
    priv: "*.*:ALL"
    state: present
    login_unix_socket: /run/mysqld/mysqld.sock
  when: ansible_os_family == "Debian"

- name: Install database for Amazon Linux
  ansible.builtin.dnf:
    name:
      - mariadb105-server
    state: present 
  when: ansible_os_family == "RedHat"

- name: Start and enable mariadb
  ansible.builtin.service:
    name: mariadb
    state: started
    enabled: true
  when: ansible_os_family == "RedHat"

- name: install pip
  ansible.builtin.dnf:
    name: python3-pip
    state: present
  when: ansible_os_family == "RedHat"

- name: install PyMySQL
  ansible.builtin.pip:
    name: PyMySQL
    state: present
  when: ansible_os_family == "RedHat"

- name: Create a database
  community.mysql.mysql_db:
    name: "{{ database_name}}"
    state: present
    login_unix_socket: /var/lib/mysql/mysql.sock
  when: ansible_os_family == "RedHat"

- name: Create a database user and grant privileges
  community.mysql.mysql_user:
    name: "{{ database_user }}"
    password: "{{ database_password }}"
    priv: "*.*:ALL"
    state: present
    login_unix_socket: /var/lib/mysql/mysql.sock
  when: ansible_os_family == "RedHat"
      

  